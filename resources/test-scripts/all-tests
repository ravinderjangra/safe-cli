#!/bin/bash

set -e -x

auth_bin_name="safe_auth"
[[ -z $RANDOM_PORT_NUMBER ]] && export RANDOM_PORT_NUMBER=41805
[[ -z $SAFE_MOCK_VAULT_PATH ]] && export SAFE_MOCK_VAULT_PATH=~/safe_auth

function download_safe_auth_nightly() {
    uname_output=$(uname -a)
    case $uname_output in
        Linux*)
            curl -L -O https://safe-authenticator-cli.s3.amazonaws.com/safe_authenticator_cli-nightly-x86_64-unknown-linux-gnu-dev.tar
            tar xvf safe_authenticator_cli-nightly-x86_64-unknown-linux-gnu-dev.tar
            rm safe_authenticator_cli-nightly-x86_64-unknown-linux-gnu-dev.tar
            ;;
        Darwin*)
            curl -L -O https://safe-authenticator-cli.s3.amazonaws.com/safe_authenticator_cli-nightly-x86_64-apple-darwin-dev.tar
            tar xvf safe_authenticator_cli-nightly-x86_64-apple-darwin-dev.tar
            rm safe_authenticator_cli-nightly-x86_64-apple-darwin-dev.tar
            ;;
        MSYS_NT*)
            curl -L -O https://safe-authenticator-cli.s3.amazonaws.com/safe_authenticator_cli-nightly-x86_64-pc-windows-gnu-dev.tar
            tar xvf safe_authenticator_cli-nightly-x86_64-pc-windows-gnu-dev.tar
            rm safe_authenticator_cli-nightly-x86_64-pc-windows-gnu-dev.tar
            auth_bin_name="safe_auth.exe"
            ;;
        *)
            echo "Platform not supported. Please extend to support this platform."
            exit 1
    esac
    rm -rf $SAFE_MOCK_VAULT_PATH
    mkdir $SAFE_MOCK_VAULT_PATH
    mv $auth_bin_name $SAFE_MOCK_VAULT_PATH
}

function run_safe_auth() {
    cd $SAFE_MOCK_VAULT_PATH
    ls -al
    SAFE_AUTH_SECRET=a SAFE_AUTH_PASSWORD=b ./$auth_bin_name --test-coins || true
    echo "Launching safe_auth daemon on port:" $RANDOM_PORT_NUMBER
    SAFE_AUTH_SECRET=a SAFE_AUTH_PASSWORD=b ./$auth_bin_name \
        --daemon $RANDOM_PORT_NUMBER --allow-all-auth &
    sleep 15
    cd -
}

function run_unit_tests() {
    rm -f fake_vault_data.json
    cargo test --lib --release --features=scl-mock -p safe_api -- --test-threads=1
    rm -f fake_vault_data.json
    cargo test --doc --release --features=scl-mock -p safe_api -- --test-threads=1

    rm -f safe_cli/fake_vault_data.json
    cargo test --release --features=scl-mock -p safe_cli --test cli_cat -- --test-threads=1
    rm -f safe_cli/fake_vault_data.json
    cargo test --release --features=scl-mock -p safe_cli --test cli_files -- --test-threads=1
    rm -f safe_cli/fake_vault_data.json
    cargo test --release --features=scl-mock -p safe_cli --test cli_keys -- --test-threads=1
    rm -f safe_cli/fake_vault_data.json
    cargo test --release --features=scl-mock -p safe_cli --test cli_wallet -- --test-threads=1
    rm -f safe_cli/fake_vault_data.json
    cargo test --release --features=scl-mock -p safe_cli --test cli_nrs -- --test-threads=1

    cargo test --lib --release --features=mock-network,fake-auth -p safe_api -- --test-threads=1
    cargo test --doc --release --features=mock-network,fake-auth -p safe_api -- --test-threads=1
}

function run_integration_tests() {
    # now let's run the integration tests but without fake-auth, using the safe_auth CLI to get credentials
    # get auth credentials which will be then used by the integration tests to connect to mock-network
    echo "Sending auth request to port:" $RANDOM_PORT_NUMBER
    cargo run --release --features=mock-network -p safe_cli -- auth --port $RANDOM_PORT_NUMBER

    cargo test --release --features=mock-network -p safe_cli --test cli_cat -- --test-threads=1
    cargo test --release --features=mock-network -p safe_cli --test cli_files -- --test-threads=1
    cargo test --release --features=mock-network -p safe_cli --test cli_keys -- --test-threads=1
    cargo test --release --features=mock-network -p safe_cli --test cli_wallet -- --test-threads=1
    cargo test --release --features=mock-network -p safe_cli --test cli_nrs -- --test-threads=1
}



download_safe_auth_nightly
run_safe_auth
cargo fmt -- --check
run_unit_tests
run_integration_tests
